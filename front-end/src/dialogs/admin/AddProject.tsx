import React, { useState, useEffect } from "react";
import styled from "styled-components";
import axios from "axios";

import PostInterface from "../../interface/PostInterface";
import ProjectInterface from "../../interface/ProjectInterface";
import Title from "./../../components/styled/SectionTitle";
import Header from "./../../components/styled/SectionHeader";
import Form, { FormGroup } from "./../../components/basic/Form";
import Input, {
    FileInput,
    InputGroup,
} from "../../components/basic/input/Input";
import TextArea from "../../components/basic/input/TextArea";
import Label, { FileInputLabel } from "../../components/Label";

const Container = styled.div`
    width: 100%;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1rem;
    background-color: var(--bg-color);
    position: relative;
    overflow: hidden;
`;

const ContentWrapper = styled.div`
    width: 100%;
    max-width: 1000px;
    /* background-color: var(--bg-secondary-color); */
    border-radius: 1rem;
    padding: 2rem;
`;

const SubmitButton = styled.button`
    align-self: flex-end;
    padding: 1rem 2rem;
    border-radius: 2rem;
    background-color: var(--secondary-color);
    color: white;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;

    &:hover {
        background-color: #d32f2f;
    }
`;

const DeleteButton = styled.button`
    align-self: flex-start;
    padding: 1rem 2rem;
    border-radius: 2rem;
    background-color: #d32f2f;
    color: white;
    font-weight: 500;
    border: none;
    cursor: pointer;
    transition: all 0.3s ease;

    &:hover {
        background-color: #b71c1c;
    }
`;

const ButtonGroup = styled.div`
    width: 100%;
    display: flex;
    justify-content: space-between;
    margin-top: 1rem;
`;

// Create Post Component
const CreatePostSection: React.FC = () => {
    const [postData, setPostData] = useState<Partial<PostInterface>>({
        title: "",
        content: "",
    });
    const [isLoading, setIsLoading] = useState<boolean>(false);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        const { name, value } = e.target;
        setPostData((prev) => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        try {
            const response = await axios.post("http://localhost:3000/post", {
                title: postData.title,
                content: postData.content,
                createdAt: new Date(),
                // No need to send ID as it will be generated by the server
            });

            console.log("Post created:", response.data);
            alert("Post created successfully!");
            setPostData({ title: "", content: "" });
        } catch (error) {
            console.error("Error creating post:", error);
            alert("Failed to create post");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <Container>
            <Header>
                <Title>
                    Create <span>Post</span>
                </Title>
            </Header>

            <ContentWrapper>
                <Form onSubmit={handleSubmit}>
                    <FormGroup>
                        <Label htmlFor="title">Post Title</Label>
                        <Input
                            type="text"
                            id="title"
                            name="title"
                            value={postData.title}
                            onChange={handleChange}
                            placeholder="Enter post title"
                            required
                        />
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="content">Content</Label>
                        <TextArea
                            id="content"
                            name="content"
                            value={postData.content}
                            onChange={handleChange}
                            placeholder="Write your post content here..."
                            rows={12}
                            required
                        />
                    </FormGroup>

                    <SubmitButton type="submit" disabled={isLoading}>
                        {isLoading ? "Publishing..." : "Publish Post"}
                    </SubmitButton>
                </Form>
            </ContentWrapper>
        </Container>
    );
};

// Update Post Component
const UpdatePostSection: React.FC<{ postId: number }> = ({ postId }) => {
    const [postData, setPostData] = useState<Partial<PostInterface>>({
        title: "",
        content: "",
    });
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [isFetching, setIsFetching] = useState<boolean>(true);

    // Fetch post data on component mount
    useEffect(() => {
        const fetchPost = async () => {
            setIsFetching(true);
            try {
                const response = await axios.get(
                    `http://localhost:3000/post/${postId}`
                );
                const post = response.data;
                setPostData({
                    title: post.title,
                    content: post.content,
                });
            } catch (error) {
                console.error("Error fetching post:", error);
                alert("Failed to fetch post data");
            } finally {
                setIsFetching(false);
            }
        };

        fetchPost();
    }, [postId]);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        const { name, value } = e.target;
        setPostData((prev) => ({ ...prev, [name]: value }));
    };

    const handleUpdate = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        try {
            const response = await axios.patch(
                `http://localhost:3000/post/${postId}`,
                {
                    title: postData.title,
                    content: postData.content,
                }
            );

            console.log("Post updated:", response.data);
            alert("Post updated successfully!");
        } catch (error) {
            console.error("Error updating post:", error);
            alert("Failed to update post");
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async () => {
        if (!window.confirm("Are you sure you want to delete this post?")) {
            return;
        }

        setIsLoading(true);
        try {
            await axios.delete(`http://localhost:3000/post/${postId}`);
            alert("Post deleted successfully!");
            // Redirect or handle post-deletion navigation here
            // For example, you could use React Router's navigate function
            // navigate("/posts");
        } catch (error) {
            console.error("Error deleting post:", error);
            alert("Failed to delete post");
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) {
        return (
            <Container>
                <ContentWrapper>
                    <p>Loading post data...</p>
                </ContentWrapper>
            </Container>
        );
    }

    return (
        <Container>
            <Header>
                <Title>
                    Update <span>Post</span>
                </Title>
            </Header>

            <ContentWrapper>
                <Form onSubmit={handleUpdate}>
                    <FormGroup>
                        <Label htmlFor="title">Post Title</Label>
                        <Input
                            type="text"
                            id="title"
                            name="title"
                            value={postData.title}
                            onChange={handleChange}
                            placeholder="Enter post title"
                            required
                        />
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="content">Content</Label>
                        <TextArea
                            id="content"
                            name="content"
                            value={postData.content}
                            onChange={handleChange}
                            placeholder="Write your post content here..."
                            rows={12}
                            required
                        />
                    </FormGroup>

                    <ButtonGroup>
                        <DeleteButton
                            type="button"
                            onClick={handleDelete}
                            disabled={isLoading}
                        >
                            Delete Post
                        </DeleteButton>
                        <SubmitButton type="submit" disabled={isLoading}>
                            {isLoading ? "Updating..." : "Update Post"}
                        </SubmitButton>
                    </ButtonGroup>
                </Form>
            </ContentWrapper>
        </Container>
    );
};

// Custom components for Create Project
const FileInputWrapper = styled.div`
    position: relative;
    width: 100%;
`;

const PreviewImage = styled.div<{ $bgImage?: string }>`
    width: 100%;
    height: 200px;
    border-radius: 0.5rem;
    margin-top: 1rem;
    background-color: #1a1a1f;
    background-image: ${(props) =>
        props.$bgImage ? `url(${props.$bgImage})` : "none"};
    background-size: cover;
    background-position: center;
    display: ${(props) => (props.$bgImage ? "block" : "none")};
`;

const CreateProjectSection: React.FC = () => {
    const [projectData, setProjectData] = useState<Partial<ProjectInterface>>({
        title: "",
        breafDescreption: "",
        descreption: "",
    });
    const [githubLinkStr, setGithubLinkStr] = useState<string>("");
    const [demoLinkStr, setDemoLinkStr] = useState<string>("");
    const [imageFile, setImageFile] = useState<File | null>(null);
    const [imagePreview, setImagePreview] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        const { name, value } = e.target;
        setProjectData((prev) => ({ ...prev, [name]: value }));
    };

    const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        if (name === "githubLink") {
            setGithubLinkStr(value);
        } else if (name === "demoLink") {
            setDemoLinkStr(value);
        }
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];
            setImageFile(file);
            const imageUrl = URL.createObjectURL(file);
            setImagePreview(imageUrl);
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        // Create a project payload that matches the DTO structure
        const projectPayload: any = {
            title: projectData.title || "",
            breafDescreption: projectData.breafDescreption || "",
            descreption: projectData.descreption || "",
            imagePath: "", // Empty string for imagePath as per DTO
        };

        // Safely handle URLs
        if (githubLinkStr.trim() !== "") {
            try {
                const githubUrl = new URL(githubLinkStr);
                projectPayload.githubLink = githubUrl.toString();
            } catch {
                alert("Invalid GitHub URL");
                setIsLoading(false);
                return;
            }
        }

        if (demoLinkStr.trim() !== "") {
            try {
                const demoUrl = new URL(demoLinkStr);
                projectPayload.demoLink = demoUrl.toString();
            } catch {
                alert("Invalid Demo URL");
                setIsLoading(false);
                return;
            }
        }

        try {
            await axios.post("http://localhost:3000/project", projectPayload, {
                headers: {
                    "Content-Type": "application/json", // Changed to JSON instead of FormData
                },
            });

            alert("Project created successfully!");
            setProjectData({
                title: "",
                breafDescreption: "",
                descreption: "",
            });
            setGithubLinkStr("");
            setDemoLinkStr("");
            setImageFile(null);
            setImagePreview(null);
        } catch (error) {
            console.error("Error creating project:", error);
            alert("Failed to create project.");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <Container>
            <Header>
                <Title>
                    Create <span>Project</span>
                </Title>
            </Header>

            <ContentWrapper>
                <Form onSubmit={handleSubmit}>
                    <FormGroup>
                        <Label htmlFor="title">Project Title</Label>
                        <Input
                            type="text"
                            id="title"
                            name="title"
                            value={projectData.title}
                            onChange={handleChange}
                            placeholder="Enter project title"
                            required
                        />
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="image">Project Image</Label>
                        <FileInputWrapper>
                            <FileInputLabel>
                                {imagePreview ? "Change Image" : "Select Image"}
                            </FileInputLabel>
                            <FileInput
                                type="file"
                                id="image"
                                name="image"
                                accept="image/*"
                                onChange={handleImageChange}
                            />
                        </FileInputWrapper>
                        <PreviewImage $bgImage={imagePreview || undefined} />
                        {imageFile && (
                            <small style={{ color: "#666", marginTop: "5px" }}>
                                Image selected but will not be sent to the
                                server yet.
                            </small>
                        )}
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="breafDescreption">
                            Brief Description
                        </Label>
                        <Input
                            type="text"
                            id="breafDescreption"
                            name="breafDescreption"
                            value={projectData.breafDescreption}
                            onChange={handleChange}
                            placeholder="Enter a brief description"
                            required
                        />
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="descreption">
                            Detailed Description
                        </Label>
                        <TextArea
                            id="descreption"
                            name="descreption"
                            value={projectData.descreption}
                            onChange={handleChange}
                            placeholder="Write detailed project description..."
                            rows={8}
                            required
                        />
                    </FormGroup>

                    <InputGroup>
                        <FormGroup>
                            <Label htmlFor="githubLink">GitHub Link</Label>
                            <Input
                                type="url"
                                id="githubLink"
                                name="githubLink"
                                value={githubLinkStr}
                                onChange={handleUrlChange}
                                placeholder="https://github.com/marouaneMJH/repo"
                            />
                        </FormGroup>

                        <FormGroup>
                            <Label htmlFor="demoLink">Demo Link</Label>
                            <Input
                                type="url"
                                id="demoLink"
                                name="demoLink"
                                value={demoLinkStr}
                                onChange={handleUrlChange}
                                placeholder="https://demo-link.com"
                            />
                        </FormGroup>
                    </InputGroup>

                    <SubmitButton type="submit" disabled={isLoading}>
                        {isLoading ? "Creating..." : "Create Project"}
                    </SubmitButton>
                </Form>
            </ContentWrapper>
        </Container>
    );
};
// Update Project Component
const UpdateProjectSection: React.FC<{ projectId: number }> = ({
    projectId,
}) => {
    const [projectData, setProjectData] = useState<Partial<ProjectInterface>>({
        title: "",
        breafDescreption: "",
        descreption: "",
    });
    const [githubLinkStr, setGithubLinkStr] = useState<string>("");
    const [demoLinkStr, setDemoLinkStr] = useState<string>("");
    const [imageFile, setImageFile] = useState<File | null>(null);
    const [imagePreview, setImagePreview] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const [isFetching, setIsFetching] = useState<boolean>(true);
    const [originalImagePath, setOriginalImagePath] = useState<string | null>(
        null
    );

    // Fetch project data on component mount
    useEffect(() => {
        const fetchProject = async () => {
            setIsFetching(true);
            try {
                const response = await axios.get(
                    `http://localhost:3000/project/${projectId}`
                );
                const project = response.data;

                setProjectData({
                    title: project.title,
                    breafDescreption: project.breafDescreption,
                    descreption: project.descreption,
                });

                // Handle URL strings
                if (project.githubLink) {
                    setGithubLinkStr(project.githubLink.toString());
                }

                if (project.demoLink) {
                    setDemoLinkStr(project.demoLink.toString());
                }

                // Handle image preview if available
                if (project.imagePath) {
                    setImagePreview(project.imagePath.toString());
                    setOriginalImagePath(project.imagePath.toString());
                }
            } catch (error) {
                console.error("Error fetching project:", error);
                alert("Failed to fetch project data");
            } finally {
                setIsFetching(false);
            }
        };

        fetchProject();
    }, [projectId]);

    const handleChange = (
        e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        const { name, value } = e.target;
        setProjectData((prev) => ({ ...prev, [name]: value }));
    };

    const handleUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        if (name === "githubLink") {
            setGithubLinkStr(value);
        } else if (name === "demoLink") {
            setDemoLinkStr(value);
        }
    };

    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            const file = e.target.files[0];
            setImageFile(file);
            const imageUrl = URL.createObjectURL(file);
            setImagePreview(imageUrl);
        }
    };

    const handleUpdate = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        // Create a project payload that matches the DTO structure(backend)
        const projectPayload: any = {
            title: projectData.title || "",
            breafDescreption: projectData.breafDescreption || "",
            descreption: projectData.descreption || "",
            imagePath: originalImagePath || "", // Keep the original image path
        };

        // Safely handle URLs
        if (githubLinkStr.trim() !== "") {
            try {
                const githubUrl = new URL(githubLinkStr);
                projectPayload.githubLink = githubUrl.toString();
            } catch {
                alert("Invalid GitHub URL");
                setIsLoading(false);
                return;
            }
        }

        if (demoLinkStr.trim() !== "") {
            try {
                const demoUrl = new URL(demoLinkStr);
                projectPayload.demoLink = demoUrl.toString();
            } catch {
                alert("Invalid Demo URL");
                setIsLoading(false);
                return;
            }
        }

        try {
            await axios.patch(
                `http://localhost:3000/project/${projectId}`,
                projectPayload,
                {
                    headers: {
                        "Content-Type": "application/json", // Changed to JSON instead of FormData
                    },
                }
            );

            alert("Project updated successfully!");
        } catch (error) {
            console.error("Error updating project:", error);
            alert("Failed to update project.");
        } finally {
            setIsLoading(false);
        }
    };

    const handleDelete = async () => {
        if (!window.confirm("Are you sure you want to delete this project?")) {
            return;
        }

        setIsLoading(true);
        try {
            await axios.delete(`http://localhost:3000/project/${projectId}`);
            alert("Project deleted successfully!");
            // Redirect or handle post-deletion navigation here
            // For example, you could use React Router's navigate function
            // navigate("/projects");
        } catch (error) {
            console.error("Error deleting project:", error);
            alert("Failed to delete project");
        } finally {
            setIsLoading(false);
        }
    };

    if (isFetching) {
        return (
            <Container>
                <ContentWrapper>
                    <p>Loading project data...</p>
                </ContentWrapper>
            </Container>
        );
    }

    return (
        <Container>
            <Header>
                <Title>
                    Update <span>Project</span>
                </Title>
            </Header>

            <ContentWrapper>
                <Form onSubmit={handleUpdate}>
                    <FormGroup>
                        <Label htmlFor="title">Project Title</Label>
                        <Input
                            type="text"
                            id="title"
                            name="title"
                            value={projectData.title}
                            onChange={handleChange}
                            placeholder="Enter project title"
                            required
                        />
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="image">Project Image</Label>
                        <FileInputWrapper>
                            <FileInputLabel>
                                {imagePreview ? "Change Image" : "Select Image"}
                            </FileInputLabel>
                            <FileInput
                                type="file"
                                id="image"
                                name="image"
                                accept="image/*"
                                onChange={handleImageChange}
                            />
                        </FileInputWrapper>
                        <PreviewImage $bgImage={imagePreview || undefined} />
                        {imageFile && (
                            <small style={{ color: "#666", marginTop: "5px" }}>
                                Image selected but will not be sent to the
                                server yet.
                            </small>
                        )}
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="breafDescreption">
                            Brief Description
                        </Label>
                        <Input
                            type="text"
                            id="breafDescreption"
                            name="breafDescreption"
                            value={projectData.breafDescreption}
                            onChange={handleChange}
                            placeholder="Enter a brief description"
                            required
                        />
                    </FormGroup>

                    <FormGroup>
                        <Label htmlFor="descreption">
                            Detailed Description
                        </Label>
                        <TextArea
                            id="descreption"
                            name="descreption"
                            value={projectData.descreption}
                            onChange={handleChange}
                            placeholder="Write detailed project description..."
                            rows={8}
                            required
                        />
                    </FormGroup>

                    <InputGroup>
                        <FormGroup>
                            <Label htmlFor="githubLink">GitHub Link</Label>
                            <Input
                                type="url"
                                id="githubLink"
                                name="githubLink"
                                value={githubLinkStr}
                                onChange={handleUrlChange}
                                placeholder="https://github.com/marouaneMJH/repo"
                            />
                        </FormGroup>

                        <FormGroup>
                            <Label htmlFor="demoLink">Demo Link</Label>
                            <Input
                                type="url"
                                id="demoLink"
                                name="demoLink"
                                value={demoLinkStr}
                                onChange={handleUrlChange}
                                placeholder="https://demo-link.com"
                            />
                        </FormGroup>
                    </InputGroup>

                    <ButtonGroup>
                        <DeleteButton
                            type="button"
                            onClick={handleDelete}
                            disabled={isLoading}
                        >
                            Delete Project
                        </DeleteButton>
                        <SubmitButton type="submit" disabled={isLoading}>
                            {isLoading ? "Updating..." : "Update Project"}
                        </SubmitButton>
                    </ButtonGroup>
                </Form>
            </ContentWrapper>
        </Container>
    );
};

export {
    CreatePostSection,
    UpdatePostSection,
    CreateProjectSection,
    UpdateProjectSection,
};
